library(stringr)
test_string <- "this is a string"
word(test_string, -3)
word(test_string, 3)
word(test_string, -2)
word(test_string, 1)
word(test_string, end=-3)
word(test_string, 1:3)
word(test_string,start=-2)
word(test_string,start=-3)
word(test_string,start=-3, end = 1)
word(test_string,start=-3, end = 4)
length(test_string)
word_count(test_string)
word(test_string,start=-3, end = word_count(test_string))
word("go",start=-3, end = word_count(test_string))
library(stringr)
predict <- function(string) {
n <- 1
if (word_count(string) > 2) {n <- 3}
else if (word_count(string) == 2) {n <- 2}
else pass
print(n)
}
predict(test_string)
predict("help")
predict <- function(string) {
n <- 1
if (word_count(string) > 2) {n <- 3}
else if (word_count(string) == 2) {n <- 2}
else {pass}
print(n)
}
predict("help")
predict <- function(string) {
n <- 1
if (word_count(string) > 2) {n <- 3}
else if (word_count(string) == 2) {n <- 2}
print(n)
}
predict("help")
word("go",start=-1, end = word_count(test_string))
word("go",start=1, end = word_count(test_string))
word("go", end = word_count(test_string))
word("go", start= -2,end = word_count(test_string))
word("go home", start= -2,end = word_count(test_string))
word("go home", start= -2,end = word_count("go home"))
word("go", start= -2,end = word_count("go"))
word("go home bro dude", start= -3,end = word_count("go home bro dude"))
predict <- function(string) {
n <- 1
if (word_count(string) > 2) {n <- 3}
else if (word_count(string) == 2) {n <- 2}
if (n == 1) {words <- string}
else {words <- word(string, start = -n, end = word_count(string))}
print(words)
}
predict(test_string)
predict("this is a long ass string of words")
predict("this is a long ass string of words. or #hashtag")
all_grams <- rbind(filtered.2, filtered.3, filtered.4)
all_grams %>% filter(grepl("is a string", gram)) %>%
arrange(desc(freq)) %>%
head(10)
head(all_grams)
all_grams %>% filter("is a string" %in% gram) %>%
arrange(desc(freq)) %>%
head(10)
library(dplyr)
all_grams %>% filter("is a string" %in% gram) %>%
arrange(desc(freq)) %>%
head(10)
all_grams <- data.table(all_grams)
all_grams %>% filter(gram %in% "is a string") %>%
arrange(desc(freq)) %>%
head(10)
names(all_grams)
all_grams %>% filter(gram == "this is") %>%
arrange(desc(freq)) %>%
head(10)
# starting the function woot
all_grams$gram <- as.factor(all_grams$gram)
all_grams %>% filter(gram == "this is") %>%
arrange(desc(freq)) %>%
head(10)
all_grams %>% filter(.,gram == "this is") %>%
arrange(desc(freq)) %>%
head(10)
filter(all_grams, grepl("this is a", gram))
all_grams %>% filter(grepl("this is a", gram)) %>%
arrange(desc(freq)) %>%
head(10)
all_grams %>% filter(grepl("this is a", gram))
all_grams %>% filter(data = ., grepl("this is a", gram))
filter(all_grams, grepl("what do I", gram)) %>%
arrange(desc(freq)) %>%
head(10)
filter(all_grams, grepl("what do", gram)) %>%
arrange(desc(freq)) %>%
head(10)
all_grams <- data.frame(all_grams)
filter(all_grams, grepl("what do", gram)) %>%
arrange(desc(freq)) %>%
head(10)
library(dplyr)
filter(all_grams, grepl("what do", gram)) %>%
arrange(desc(freq)) %>%
head(10)
all_grams <- data.table(all_grams)
library(data.table )
all_grams <- data.table(all_grams)
filter(all_grams, grepl("what do I", gram)) %>%
arrange(desc(freq)) %>%
head(10)
filter(all_grams, grepl("^what do I$", gram)) %>%
arrange(desc(freq)) %>%
head(10)
filter(all_grams, grepl("^what the$", gram)) %>%
arrange(desc(freq)) %>%
head(10)
filter(all_grams, grepl("^What the$", gram)) %>%
arrange(desc(freq)) %>%
head(10)
bad_words <- c("fuck", "shit", "ass", "bitch")
all_grams <- all_grams[!grepl(bad_words, all_grams$n, ignore.case = TRUE),]
all_grams <- all_grams[!(tolower(all_grams$n) %in% bad_words),]
filter(all_grams, grepl("^What the$", gram)) %>%
arrange(desc(freq)) %>%
head(10)
all_grams <- group_by(all_grams, gram, n) %>%
summarize(freq = sum(freq))
filter(all_grams, grepl("^What the$", gram)) %>%
arrange(desc(freq)) %>%
head(10)
head(all_grams)
all_grams <- ungroup(all_grams)
filter(all_grams, grepl("^What the$", gram)) %>%
arrange(desc(freq)) %>%
head(10)
filter(all_grams, grepl("^What the$", gram, ignore.case=TRUE)) %>%
arrange(desc(freq)) %>%
head(10)
predict <- function(string) {
n <- 1
if (word_count(string) > 2) {n <- 3}
else if (word_count(string) == 2) {n <- 2}
if (n == 1) {words <- string}
else {words <- word(string, start = -n, end = word_count(string))}
return(words)
}
predict("you should come test us")
library(stringr)
predict("you should come test us")
word_count("strang it")
??word_count
library(qdap)
word_count("strang it")
word_count("strang it")
predict("you should come test us")
words
words.x <- predict("you should come test us")
paste(words.x, "$")
?paste
paste(words.x, "$", sep="")
predict.match <- function(words) {
filter(all_grams, grepl(paste(words, "$", sep=""), gram)) %>%
arrange(desc(freq)) %>%
head(10)
}
predict.match("hail yes dude")
predict.match("this is what")
predict.match("this is what")
predict.match <- function(words) {
filter(all_grams, grepl(paste(words, "$", sep=""), gram),
min_rank(desc(freq))) %>%
head(3)
}
predict.match("this is what")
predict.match("this is what")
predict.match <- function(words) {
filter(all_grams, grepl(paste(words, "$", sep=""), gram),
min_rank(desc(freq)) <= 3)
}
predict.match("this is what")
predict.match <- function(words) {
filter(all_grams, grepl(paste(words, "$", sep=""), gram),
min_rank(desc(freq)) < 3)
}
predict.match("this is what")
predict.match <- function(words) {
filter(all_grams, grepl(paste(words, "$", sep=""), gram)) %>%
filter(min_rank(desc(freq)) < 3)
}
predict.match("this is what")
predict.match <- function(words) {
filter(all_grams, grepl(paste(words, "$", sep=""), gram)) %>%
filter(min_rank(desc(freq)) <= 3) %>%
select(n)
}
predict.match("this is what")
predict.input <- function(string) {
n <- 1
if (word_count(string) > 2) {n <- 3}
else if (word_count(string) == 2) {n <- 2}
if (n == 1) {words <- string}
else {words <- word(string, start = -n, end = word_count(string))}
return(words, n)
}
predict.input("this is how we do")
predict.input <- function(string) {
n <- 1
if (word_count(string) > 2) {n <- 3}
else if (word_count(string) == 2) {n <- 2}
if (n == 1) {words <- string}
else {words <- word(string, start = -n, end = word_count(string))}
return(list(words, n))
}
predict.input("this is how we do")
unlist(predict.input("this is how we do"))
unlist(predict.input("this is how we do"))[1]
as.numeric(unlist(predict.input("this is how we do"))[2])
predict.match("this")
predict.match("this is")
predict.match("this is crazy")
predict.match("crazy")
x <- predict.match("crazy")
length(x)
length(x$n)
?select
predict.match("crazy")$n
string
x
x <- "this is a string man"
word(x)
word(x, -1)
word(x, start = -1, end = word_count(string))
word(x, start = -1, end = word_count(x))
word(x, start = -3, end = word_count(x))
word(x, start = -2, end = word_count(x))
x
x <- predict.match("crazy")$n
x
y <- predict.match("this is")$n
x
y
x + y
c(x, y)
length(c(x, y))
word(x, start = -2, end = word_count(x))
x <- "this is a string"
word(x, start = -2, end = word_count(x))
word(x, -1)
most_common <- c("the", "a", "to")
x
y
x <- predict.match("crazy")$n
if (x %in% y) print(x)
x
y
y <- c(y, " and")
y
y <- y[-1]
y
y <- c(y, "and")
x
y
for (x %in% y) print(x)
for (x %in% y) {print(x)}
x %in% y
x[x %in% y]
x[x %not in% y]
x[!(x %in% y)]
swift.output <- (sentence) {
gram <- predict.input(sentence)
n <- predict.match(gram)$n
if (length(n) == 3) {return(n)}
else {
gram <- word(gram, start = -2, end = word_count(gram))
n <- c(n, predict.match(gram)$n)
if (length(n) >= 3) {return(n[1:3])}
else {
gram <- word(gram, -1)
n <- c(n, predict.match(gram)$n)
if (length(n) >= 3) {return(n[1:3])}
else{
n <- c(n, most_common[!(most_common %in% n)])
return(n[1:3])
}
}
}
}
swift.output <- (sentence) {
gram <- predict.input(sentence)
n <- predict.match(gram)$n
if (length(n) == 3) {return(n)}
else {
gram <- word(gram, start = -2, end = word_count(gram))
n <- c(n, predict.match(gram)$n)
}
if (length(n) >= 3) {return(n[1:3])}
else {
gram <- word(gram, -1)
n <- c(n, predict.match(gram)$n)
}
if (length(n) >= 3) {return(n[1:3])}
else{
n <- c(n, most_common[!(most_common %in% n)])
return(n[1:3])
}
}
swift.output <- (sentence) {
gram <- predict.input(sentence)
n <- predict.match(gram)$n
if (length(n) == 3) {return(n)}
else {
gram <- word(gram, start = -2, end = word_count(gram))
n <- c(n, predict.match(gram)$n)
}
if (length(n) >= 3) {return(n[1:3])}
else {
gram <- word(gram, -1)
n <- c(n, predict.match(gram)$n)
}
if (length(n) >= 3) {return(n[1:3])}
else {
n <- c(n, most_common[!(most_common %in% n)])
return(n[1:3])
}
}
swift.output <- function(sentence) {
gram <- predict.input(sentence)
n <- predict.match(gram)$n
if (length(n) == 3) {return(n)}
else {
gram <- word(gram, start = -2, end = word_count(gram))
n <- c(n, predict.match(gram)$n)
}
if (length(n) >= 3) {return(n[1:3])}
else {
gram <- word(gram, -1)
n <- c(n, predict.match(gram)$n)
}
if (length(n) >= 3) {return(n[1:3])}
else {
n <- c(n, most_common[!(most_common %in% n)])
return(n[1:3])
}
}
swift.output("this is a string of words")
swift.output("this is a string of words")
string
predict.match <- function(words) {
words <- paste(words, "$", sep="")
filter(all_grams, grepl(words, gram)) %>%
filter(min_rank(desc(freq)) <= 3) %>%
select(n)
}
}
predict.match("this is a string of words")
predict.match("string of words")
predict.match("words")
swift.output <- function(sentence) {
gram <- predict.input(sentence)
n <- predict.match(gram)$n
if (length(n) == 3) {return(n)}
else {
gram <- word(gram, start = -2, end = word_count(gram))
n <- c(n, predict.match(gram)$n)
}
if (length(n) >= 3) {return(n[1:3])}
else {
gram <- word(gram, -1)
n <- c(n, predict.match(gram)$n)
}
if (length(n) >= 3) {return(n[1:3])}
else {
n <- c(n, most_common[!(most_common %in% n)])
return(n[1:3])
}
}
swift.output("this is a string of words")
swift.output("this is a string of words")
string
swift.output("this is a string of words")
swift.output("this is a string of words")
predict.input <- function(string) {
n <- 1
if (word_count(string) > 2) {n <- 3}
else if (word_count(string) == 2) {n <- 2}
if (n == 1) {words <- string}
else {words <- word(string, start = -n, end = word_count(string))}
return(words)
}
swift.output("this is a string of words")
swift.output("where will we go from Here. That is what's Up")
save(all_grams, file="final_grams.Rda")
library(shiny)
runExample("02_text")
runExample("03_reactivity")
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
length("")
length("a")
length("a ")
length("a f")
""==""
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
x <- "these are a sentence "
x
x[-1]
gsub(" $", "", x)
x <- gsub(" $", "", x)
gsub(" $", "", x)
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
x <- c("words", "more", "this", "words")
x
unique(x)
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
shiny::runApp('~/datasciencecoursera/My Files/10-Capstone/final/text-predictor')
library(shinyapps)
getwd()
setwd("~/datasciencecoursera/My Files/10-Capstone/final/text-predictor")
deployApp()
devtools::install_github("rstudio/shinyapps")
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
class(all_grams)
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shiny")
setwd("~/Documents")
install.packages("shiny")
setwd("~/datasciencecoursera/My Files/10-Capstone/final/text-predictor")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::install_github("rstudio/shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
??withProgress
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?shiny
devtools::install_github("rstudio/shiny")
devtools::install_github("rstudio/shiny")
install.packages("httpuv")
devtools::install_github("rstudio/shiny")
install.packages(c("Rcpp", "httpuv", "shiny"))
?shiny
??shiny
library(shiny)
?shiny
shiny::runApp()
devtools::install_github("rstudio/shiny")
devtools::install_github("rstudio/httpuv")
devtools::install_github("rstudio/shiny")
?httpuv
devtools::install_github("rstudio/shiny")
library(shiny)
?shinyt
?shiny
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinyapps)
deployApp()
?vignettes()
?vignette
